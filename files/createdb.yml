- name: Create mariadb database 
  hosts: localhost
  gather_facts: no
  connection: local
  vars:
    random_password: "{{ lookup('env', 'RANDOM_PASSWORD') }}" 
    mariadb_database: "{{ lookup('env', 'MARIADB_DATABASE') | default('mysql', true) }}"
    mariadb_username: "{{ lookup('env', 'MARIADB_USERNAME') | default('admin', true) }}"
    mariadb_password: "{{ lookup('env', 'MARIADB_PASSWORD') | default('admin', true) }}"
    mariadb_root_password: "{{ lookup('env', 'MARIADB_ROOT_PASSWORD') | default(random_password, true) }}"

  tasks: 

    - name: Init the database
      command: mysql_install_db --datadir="/var/lib/mysql" --rpm
   
    - name: Start the server in the background
      shell: mysqld & >/dev/null 2>&1 && echo $!
      register: mysql_pid

    - name: Wait for the database to be ready
      wait_for: port=3306 timeout=30  

    - name: Template create root 
      template:
        src: "{{ playbook_dir }}/create_root.sql.j2"
        dest: "{{ playbook_dir }}/create_root.sql"
    
    - name: Execute create root
      shell: cat {{ playbook_dir }}/create_root.sql | mysql --protocol=socket -uroot

    - name: Template createdb
      template:
        src: "{{ playbook_dir }}/createdb.sql.j2"
        dest: "{{ playbook_dir }}/createdb.sql"
    
    - name: Execute createdb 
      shell: cat {{ playbook_dir }}/createdb.sql | mysql --protocol=socket -uroot -p"{{ mariadb_root_password }}"

    - name: Template grant.sql
      template:
        src: "{{ playbook_dir }}/grant.sql.j2"
        dest: "{{ playbook_dir }}/grant.sql"

    - name: Execute grants    
      shell: cat {{ playbook_dir }}/grant.sql | mysql --protocol=socket -uroot -p"{{ mariadb_root_password }}"
     
    # - name: Remove .sql files
    #  file: path="{{ item }}" state=absent
    #  with_fileglob:
    #    - /install/*.sql

    - name: Show the root password
      debug: msg="Set the root password to {{ mariadb_root_password }}"
      when: mariadb_root_password == random_password 

    - name: Kill the background process
      shell: kill -s TERM {{ mysql_pid.stdout }}

